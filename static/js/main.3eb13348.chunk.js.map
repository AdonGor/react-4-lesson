{"version":3,"sources":["components/ColorPicker/ColorPicker.js","components/Container/Container.js","components/TodoList/TodoList.js","components/TodoEditor/TodoEditor.js","components/Filter.js","components/Form.js","App.js","index.js"],"names":["ColorPicker","state","activeOptionIdx","setActiveIdx","index","setState","makeOptionClassName","classNames","this","options","props","label","className","map","color","style","backgroundColor","onClick","Component","Container","children","TodoList","todos","onDeleteTodo","onToggleCompleted","id","text","completed","type","checked","onChange","TodoEditor","message","handleChange","e","currentTarget","value","handleSubmit","preventDefault","onSubmit","Filter","Form","name","tag","experience","licence","nameInputId","shortid","generate","tagInputId","event","reset","handleLicenceChange","htmlFor","disabled","App","initialTodos","filter","addTodo","todo","deleteTodo","todoId","prevState","toggleCompleted","changeFilter","getVisibleTodos","normalizedFilter","toLowerCase","includes","calculateCompletedTodos","reduce","total","totalTodoCount","length","completedTodoCount","visibleTodos","formSubmitHandler","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eb13348.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './ColorPicker.css';\n\nclass ColorPicker extends Component {\n  state = {\n    activeOptionIdx: 0,\n  };\n\n  setActiveIdx = index => {\n    this.setState({ activeOptionIdx: index });\n  };\n\n  makeOptionClassName = index => {\n    return classNames('ColorPicker__option', {\n      'ColorPicker__option--active': index === this.state.activeOptionIdx,\n    });\n  };\n\n  render() {\n    const { activeOptionIdx } = this.state;\n    const { options } = this.props;\n    const { label } = options[activeOptionIdx];\n\n    return (\n      <div className=\"ColorPicker\">\n        <h2 className=\"ColorPicker__title\">Color Picker</h2>\n        <p>Выбран цвет: {label}</p>\n        <div>\n          {options.map(({ label, color }, index) => (\n            <button\n              key={label}\n              className={this.makeOptionClassName(index)}\n              style={{ backgroundColor: color }}\n              onClick={() => this.setActiveIdx(index)}\n            ></button>\n          ))}\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default ColorPicker;\n","import React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nconst TodoList = ({ todos, onDeleteTodo, onToggleCompleted }) => (\n  <ul className=\"TodoList\">\n    {todos.map(({ id, text, completed }) => (\n      <li\n        key={id}\n        className={classNames('TodoList__item', {\n          'TodoList__item--completed': completed,\n        })}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"TodoList__checkbox\"\n          checked={completed}\n          onChange={() => onToggleCompleted(id)}\n        />\n        <p className=\"TodoList__text\">{text}</p>\n        <button\n          type=\"button\"\n          className=\"TodoList__btn\"\n          onClick={() => onDeleteTodo(id)}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport './TodoEditor.scss';\n\nclass TodoEditor extends Component {\n  state = {\n    message: '',\n  };\n\n  handleChange = e => {\n    this.setState({ message: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state.message);\n\n    this.setState({ message: '' });\n  };\n\n  render() {\n    return (\n      <form className=\"TodoEditor\" onSubmit={this.handleSubmit}>\n        <textarea\n          className=\"TodoEditor__textarea\"\n          value={this.state.message}\n          onChange={this.handleChange}\n        ></textarea>\n        <button type=\"submit\" className=\"TodoEditor__button\">\n          Сохранить\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default TodoEditor;\n","import React from 'react';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Фильтр по имени\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    tag: '',\n    experience: 'junior',\n    licence: false,\n  };\n\n  nameInputId = shortid.generate();\n  tagInputId = shortid.generate();\n\n  handleChange = event => {\n    const { name, value }= event.currentTarget;\n    this.setState({[name]: value});\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  }\n\n  reset = () => {\n    this.setState({name: '', tag: ''})\n  }\n\n  handleLicenceChange = event => {\n    this.setState({licence: event.currentTarget.checked })\n  }\n\n  render() {\n    return (\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor={this.nameInputId}>\n            Name <input \n            type=\"text\"\n            name= \"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n            />\n          </label>\n          <label htmlFor={this.tagInputId}>\n            Tag <input \n            type=\"text\"\n            name= \"tag\"\n            value={this.state.tag}\n            onChange={this.handleChange}     \n            id={this.tagInputId}       \n          />\n          </label>\n\n            <p>Your level:</p>\n\n            <label>\n              <input \n              type=\"radio\" \n              name=\"experience\" \n              value=\"junior\"\n              onChange={this.handleChange}\n              checked={this.state.experience === \"junior\"}\n              />Junior\n            </label>\n            <label>\n              <input \n              type=\"radio\" \n              name=\"experience\" \n              value=\"middle\"\n              onChange={this.handleChange}\n              checked={this.state.experience === \"middle\"}\n              />Middle \n            </label>\n            <label>\n              <input \n              type=\"radio\" \n              name=\"experience\" \n              value=\"senior\"\n              onChange={this.handleChange}\n              checked={this.state.experience === \"senior\"}\n              />Signore\n            </label> \n              <input \n              type=\"checkbox\" \n              name=\"licence\"\n              checked={this.state.licence} \n              onChange={this.handleLicenceChange}\n              />I agree  \n\n          <button type=\"submit\" disabled={!this.state.licence}> Отправить</button>\n        </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport ColorPicker from './components/ColorPicker';\n// import Counter from './components/Counter';\nimport Container from './components/Container';\nimport TodoList from './components/TodoList';\nimport TodoEditor from './components/TodoEditor';\nimport Filter from './components/Filter';\nimport Form from './components/Form';\nimport initialTodos from './todos.json';\n\nclass App extends Component {\n  state = {\n    todos: initialTodos,\n    filter: '',\n  };\n\n  addTodo = text => {\n    // многие из этих вещей будут делаться на сервере, как шорт айди и эта тудуха например\n    const todo = {\n      id: shortid.generate(),\n      text,\n      completed: false,\n    };\n\n    this.setState(({ todos }) => ({\n      todos: [todo, ...todos],\n    }));\n  };\n\n  deleteTodo = todoId => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  toggleCompleted = todoId => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => \n      // {\n      //   if (todo.id === todoId) {\n      //     return {\n      //       ...todo,\n      //       completed: !todo.completed,\n      //     };\n      //   }\n      //   return todo;\n      // }\n      todo.id === todoId ? { ...todo, completed: !todo.completed } : todo,\n      ),\n    }));\n  }\n\n  // formSubmitHandler = data => {\n  //   setTimeout(() => {\n  //     console.log(data);\n  //   }, 1000);\n  // }\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleTodos = () => {\n    const { filter, todos } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return todos.filter(todo =>\n      todo.text.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  calculateCompletedTodos = () => {\n    const { todos } = this.state;\n\n    return todos.reduce(\n      (total, todo) => (todo.completed ? total + 1 : total),\n      0,\n    );\n  };\n\n  render() {\n    const { todos, filter } = this.state;\n    const totalTodoCount = todos.length;\n    const completedTodoCount = this.calculateCompletedTodos();\n    const visibleTodos = this.getVisibleTodos();\n    return (\n      <Container>\n        <Form onSubmit={this.formSubmitHandler}/>\n        <ColorPicker options={[\n          { label: 'red', color: '#F44336' },\n          { label: 'green', color: '#4CAF50' },\n          { label: 'blue', color: '#2196F3' },\n          { label: 'grey', color: '#607D8B' },\n          { label: 'pink', color: '#E91E63' },\n          { label: 'indigo', color: '#3F51B5' },\n        ]}/>\n        <div>\n          <p>Всего заметок: {totalTodoCount}</p>\n          <p>Выполнено: {completedTodoCount}</p>\n        </div>\n\n        <TodoEditor onSubmit={this.addTodo} />\n\n        <Filter value={filter} onChange={this.changeFilter} />\n\n        <TodoList\n          todos={visibleTodos}\n          onDeleteTodo={this.deleteTodo}\n          onToggleCompleted={this.toggleCompleted}\n        />\n      </Container>\n    )\n  }\n}\n\nexport default App;\n\n// const colorPickerOptions = [\n//   { label: 'red', color: '#F44336' },\n//   { label: 'green', color: '#4CAF50' },\n//   { label: 'blue', color: '#2196F3' },\n//   { label: 'grey', color: '#607D8B' },\n//   { label: 'pink', color: '#E91E63' },\n//   { label: 'indigo', color: '#3F51B5' },\n// ];\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}